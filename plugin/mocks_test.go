// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/hashicorp/vault/sdk/logical (interfaces: SystemView,Storage)

// Package gcpauth is a generated GoMock package.
package gcpauth

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	consts "github.com/hashicorp/vault/sdk/helper/consts"
	license "github.com/hashicorp/vault/sdk/helper/license"
	pluginutil "github.com/hashicorp/vault/sdk/helper/pluginutil"
	wrapping "github.com/hashicorp/vault/sdk/helper/wrapping"
	logical "github.com/hashicorp/vault/sdk/logical"
	reflect "reflect"
	time "time"
)

// MockSystemView is a mock of SystemView interface
type MockSystemView struct {
	ctrl     *gomock.Controller
	recorder *MockSystemViewMockRecorder
}

// MockSystemViewMockRecorder is the mock recorder for MockSystemView
type MockSystemViewMockRecorder struct {
	mock *MockSystemView
}

// NewMockSystemView creates a new mock instance
func NewMockSystemView(ctrl *gomock.Controller) *MockSystemView {
	mock := &MockSystemView{ctrl: ctrl}
	mock.recorder = &MockSystemViewMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSystemView) EXPECT() *MockSystemViewMockRecorder {
	return m.recorder
}

// CachingDisabled mocks base method
func (m *MockSystemView) CachingDisabled() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CachingDisabled")
	ret0, _ := ret[0].(bool)
	return ret0
}

// CachingDisabled indicates an expected call of CachingDisabled
func (mr *MockSystemViewMockRecorder) CachingDisabled() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CachingDisabled", reflect.TypeOf((*MockSystemView)(nil).CachingDisabled))
}

// DefaultLeaseTTL mocks base method
func (m *MockSystemView) DefaultLeaseTTL() time.Duration {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DefaultLeaseTTL")
	ret0, _ := ret[0].(time.Duration)
	return ret0
}

// DefaultLeaseTTL indicates an expected call of DefaultLeaseTTL
func (mr *MockSystemViewMockRecorder) DefaultLeaseTTL() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DefaultLeaseTTL", reflect.TypeOf((*MockSystemView)(nil).DefaultLeaseTTL))
}

// EntityInfo mocks base method
func (m *MockSystemView) EntityInfo(arg0 string) (*logical.Entity, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EntityInfo", arg0)
	ret0, _ := ret[0].(*logical.Entity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EntityInfo indicates an expected call of EntityInfo
func (mr *MockSystemViewMockRecorder) EntityInfo(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EntityInfo", reflect.TypeOf((*MockSystemView)(nil).EntityInfo), arg0)
}

// GroupsForEntity mocks base method
func (m *MockSystemView) GroupsForEntity(arg0 string) ([]*logical.Group, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GroupsForEntity", arg0)
	ret0, _ := ret[0].([]*logical.Group)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GroupsForEntity indicates an expected call of GroupsForEntity
func (mr *MockSystemViewMockRecorder) GroupsForEntity(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GroupsForEntity", reflect.TypeOf((*MockSystemView)(nil).GroupsForEntity), arg0)
}

// HasFeature mocks base method
func (m *MockSystemView) HasFeature(arg0 license.Features) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasFeature", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// HasFeature indicates an expected call of HasFeature
func (mr *MockSystemViewMockRecorder) HasFeature(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasFeature", reflect.TypeOf((*MockSystemView)(nil).HasFeature), arg0)
}

// LocalMount mocks base method
func (m *MockSystemView) LocalMount() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LocalMount")
	ret0, _ := ret[0].(bool)
	return ret0
}

// LocalMount indicates an expected call of LocalMount
func (mr *MockSystemViewMockRecorder) LocalMount() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LocalMount", reflect.TypeOf((*MockSystemView)(nil).LocalMount))
}

// LookupPlugin mocks base method
func (m *MockSystemView) LookupPlugin(arg0 context.Context, arg1 string, arg2 consts.PluginType) (*pluginutil.PluginRunner, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LookupPlugin", arg0, arg1, arg2)
	ret0, _ := ret[0].(*pluginutil.PluginRunner)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LookupPlugin indicates an expected call of LookupPlugin
func (mr *MockSystemViewMockRecorder) LookupPlugin(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LookupPlugin", reflect.TypeOf((*MockSystemView)(nil).LookupPlugin), arg0, arg1, arg2)
}

// MaxLeaseTTL mocks base method
func (m *MockSystemView) MaxLeaseTTL() time.Duration {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MaxLeaseTTL")
	ret0, _ := ret[0].(time.Duration)
	return ret0
}

// MaxLeaseTTL indicates an expected call of MaxLeaseTTL
func (mr *MockSystemViewMockRecorder) MaxLeaseTTL() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MaxLeaseTTL", reflect.TypeOf((*MockSystemView)(nil).MaxLeaseTTL))
}

// MlockEnabled mocks base method
func (m *MockSystemView) MlockEnabled() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MlockEnabled")
	ret0, _ := ret[0].(bool)
	return ret0
}

// MlockEnabled indicates an expected call of MlockEnabled
func (mr *MockSystemViewMockRecorder) MlockEnabled() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MlockEnabled", reflect.TypeOf((*MockSystemView)(nil).MlockEnabled))
}

// PluginEnv mocks base method
func (m *MockSystemView) PluginEnv(arg0 context.Context) (*logical.PluginEnvironment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PluginEnv", arg0)
	ret0, _ := ret[0].(*logical.PluginEnvironment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PluginEnv indicates an expected call of PluginEnv
func (mr *MockSystemViewMockRecorder) PluginEnv(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PluginEnv", reflect.TypeOf((*MockSystemView)(nil).PluginEnv), arg0)
}

// ReplicationState mocks base method
func (m *MockSystemView) ReplicationState() consts.ReplicationState {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReplicationState")
	ret0, _ := ret[0].(consts.ReplicationState)
	return ret0
}

// ReplicationState indicates an expected call of ReplicationState
func (mr *MockSystemViewMockRecorder) ReplicationState() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReplicationState", reflect.TypeOf((*MockSystemView)(nil).ReplicationState))
}

// ResponseWrapData mocks base method
func (m *MockSystemView) ResponseWrapData(arg0 context.Context, arg1 map[string]interface{}, arg2 time.Duration, arg3 bool) (*wrapping.ResponseWrapInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResponseWrapData", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*wrapping.ResponseWrapInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResponseWrapData indicates an expected call of ResponseWrapData
func (mr *MockSystemViewMockRecorder) ResponseWrapData(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResponseWrapData", reflect.TypeOf((*MockSystemView)(nil).ResponseWrapData), arg0, arg1, arg2, arg3)
}

// Tainted mocks base method
func (m *MockSystemView) Tainted() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Tainted")
	ret0, _ := ret[0].(bool)
	return ret0
}

// Tainted indicates an expected call of Tainted
func (mr *MockSystemViewMockRecorder) Tainted() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Tainted", reflect.TypeOf((*MockSystemView)(nil).Tainted))
}

// MockStorage is a mock of Storage interface
type MockStorage struct {
	ctrl     *gomock.Controller
	recorder *MockStorageMockRecorder
}

// MockStorageMockRecorder is the mock recorder for MockStorage
type MockStorageMockRecorder struct {
	mock *MockStorage
}

// NewMockStorage creates a new mock instance
func NewMockStorage(ctrl *gomock.Controller) *MockStorage {
	mock := &MockStorage{ctrl: ctrl}
	mock.recorder = &MockStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockStorage) EXPECT() *MockStorageMockRecorder {
	return m.recorder
}

// Delete mocks base method
func (m *MockStorage) Delete(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockStorageMockRecorder) Delete(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockStorage)(nil).Delete), arg0, arg1)
}

// Get mocks base method
func (m *MockStorage) Get(arg0 context.Context, arg1 string) (*logical.StorageEntry, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1)
	ret0, _ := ret[0].(*logical.StorageEntry)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockStorageMockRecorder) Get(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockStorage)(nil).Get), arg0, arg1)
}

// List mocks base method
func (m *MockStorage) List(arg0 context.Context, arg1 string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0, arg1)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List
func (mr *MockStorageMockRecorder) List(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockStorage)(nil).List), arg0, arg1)
}

// Put mocks base method
func (m *MockStorage) Put(arg0 context.Context, arg1 *logical.StorageEntry) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Put", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Put indicates an expected call of Put
func (mr *MockStorageMockRecorder) Put(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Put", reflect.TypeOf((*MockStorage)(nil).Put), arg0, arg1)
}
